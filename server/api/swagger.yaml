openapi: 3.0.0
info:
  title: ""
  version: ""
servers:
- url: /
paths:
  /capabilities:
    get:
      responses:
        "200":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CapabilitiesResponse'
        "400":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /schema:
    get:
      parameters:
      - name: X-Hasura-DataConnector-SourceName
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: X-Hasura-DataConnector-Config
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: object
          additionalProperties: true
          nullable: false
      responses:
        "200":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/SchemaResponse'
        "400":
          description: ' or `X-Hasura-DataConnector-Config` or `X-Hasura-DataConnector-SourceName`'
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /query:
    post:
      parameters:
      - name: X-Hasura-DataConnector-SourceName
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: X-Hasura-DataConnector-Config
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: object
          additionalProperties: true
          nullable: false
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        "200":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        "400":
          description: ' or `body` or `X-Hasura-DataConnector-Config` or `X-Hasura-DataConnector-SourceName`'
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /explain:
    post:
      parameters:
      - name: X-Hasura-DataConnector-SourceName
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: X-Hasura-DataConnector-Config
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: object
          additionalProperties: true
          nullable: false
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        "200":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ExplainResponse'
        "400":
          description: Invalid `body` or `X-Hasura-DataConnector-Config` or `X-Hasura-DataConnector-SourceName`
  /mutation:
    post:
      parameters:
      - name: X-Hasura-DataConnector-SourceName
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: X-Hasura-DataConnector-Config
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: object
          additionalProperties: true
          nullable: false
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/MutationRequest'
      responses:
        "200":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/MutationResponse'
        "400":
          description: ' or `body` or `X-Hasura-DataConnector-Config` or `X-Hasura-DataConnector-SourceName`'
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health:
    get:
      parameters:
      - name: X-Hasura-DataConnector-SourceName
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: X-Hasura-DataConnector-Config
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: object
          additionalProperties: true
          nullable: false
      responses:
        "204":
          description: ""
        "400":
          description: Invalid `X-Hasura-DataConnector-Config` or `X-Hasura-DataConnector-SourceName`
  /metrics:
    get:
      responses:
        "200":
          description: ""
          content:
            text/plain;version=0.0.4;charset=utf-8:
              schema:
                type: string
                x-content-type: text/plain;version=0.0.4;charset=utf-8
  /raw:
    post:
      parameters:
      - name: X-Hasura-DataConnector-SourceName
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: X-Hasura-DataConnector-Config
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: object
          additionalProperties: true
          nullable: false
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/RawRequest'
      responses:
        "200":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/RawResponse'
        "400":
          description: Invalid `body` or `X-Hasura-DataConnector-Config` or `X-Hasura-DataConnector-SourceName`
  /datasets/templates/{template_name}:
    get:
      parameters:
      - name: template_name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/DatasetGetTemplateResponse'
        "404":
          description: '`template_name` not found'
  /datasets/clones/{clone_name}:
    post:
      parameters:
      - name: clone_name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/DatasetCreateCloneRequest'
      responses:
        "200":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/DatasetCreateCloneResponse'
        "400":
          description: Invalid `body`
        "404":
          description: '`clone_name` not found'
    delete:
      parameters:
      - name: clone_name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/DatasetDeleteCloneResponse'
        "404":
          description: '`clone_name` not found'
components:
  schemas:
    CapabilitiesResponse:
      required:
      - capabilities
      - config_schemas
      type: object
      properties:
        capabilities:
          $ref: '#/components/schemas/Capabilities'
        config_schemas:
          $ref: '#/components/schemas/ConfigSchemaResponse'
        display_name:
          type: string
        release_name:
          type: string
      nullable: false
      example:
        capabilities:
          explain: ""
          subscriptions: ""
          user_defined_functions: ""
          scalar_types:
            key:
              aggregate_functions:
                key: aggregate_functions
              update_column_operators:
                key:
                  argument_type: null
              comparison_operators:
                key: null
              graphql_type: Int
          raw: ""
          datasets: ""
          queries:
            foreach: ""
          relationships: ""
          mutations:
            returning: ""
            atomicity_support_level: row
            insert:
              supports_nested_inserts: false
            update: ""
            delete: ""
          comparisons:
            subquery:
              supports_relations: false
          data_schema:
            supports_foreign_keys: false
            column_nullability: only_nullable
            supports_schemaless_tables: false
            supports_primary_keys: false
          metrics: ""
          licensing: ""
        config_schemas:
          config_schema:
            writeOnly: false
            nullable: false
            deprecated: false
            minLength: 0
            pattern: pattern
            description: description
            title: title
            type: array
            required:
            - required
            - required
            example: ""
            exclusiveMaximum: false
            allOf:
            - ""
            - ""
            default: ""
            not: ""
            oneOf:
            - ""
            - ""
            xml:
              prefix: prefix
              name: name
              namespace: http://example.com/aeiou
              attribute: false
              wrapped: false
            maxProperties: 0
            exclusiveMinimum: false
            multipleOf: 0.361607674925191080461672754609026014804840087890625
            maxItems: 0
            format: format
            anyOf:
            - ""
            - ""
            readOnly: false
            enum:
            - ""
            - ""
            discriminator:
              mapping:
                key: mapping
              propertyName: propertyName
            minProperties: 0
            minItems: 0
            uniqueItems: false
            maximum: 5.962133916683182377482808078639209270477294921875
            additionalProperties:
              key: ""
            externalDocs:
              description: description
              url: url
            items: ""
            minimum: 9.301444243932575517419536481611430644989013671875
            maxLength: 0
            properties:
              key: ""
          other_schemas:
            key: null
        release_name: release_name
        display_name: display_name
    Capabilities:
      type: object
      properties:
        comparisons:
          $ref: '#/components/schemas/ComparisonCapabilities'
        data_schema:
          $ref: '#/components/schemas/DataSchemaCapabilities'
        datasets:
          $ref: '#/components/schemas/DatasetCapabilities'
        explain:
          $ref: '#/components/schemas/ExplainCapabilities'
        licensing:
          $ref: '#/components/schemas/Licensing'
        metrics:
          $ref: '#/components/schemas/MetricsCapabilities'
        mutations:
          $ref: '#/components/schemas/MutationCapabilities'
        queries:
          $ref: '#/components/schemas/QueryCapabilities'
        raw:
          $ref: '#/components/schemas/RawCapabilities'
        relationships:
          $ref: '#/components/schemas/RelationshipCapabilities'
        scalar_types:
          $ref: '#/components/schemas/ScalarTypesCapabilities'
        subscriptions:
          $ref: '#/components/schemas/SubscriptionCapabilities'
        user_defined_functions:
          $ref: '#/components/schemas/UserDefinedFunctionCapabilities'
      example:
        explain: ""
        subscriptions: ""
        user_defined_functions: ""
        scalar_types:
          key:
            aggregate_functions:
              key: aggregate_functions
            update_column_operators:
              key:
                argument_type: null
            comparison_operators:
              key: null
            graphql_type: Int
        raw: ""
        datasets: ""
        queries:
          foreach: ""
        relationships: ""
        mutations:
          returning: ""
          atomicity_support_level: row
          insert:
            supports_nested_inserts: false
          update: ""
          delete: ""
        comparisons:
          subquery:
            supports_relations: false
        data_schema:
          supports_foreign_keys: false
          column_nullability: only_nullable
          supports_schemaless_tables: false
          supports_primary_keys: false
        metrics: ""
        licensing: ""
    ColumnNullability:
      type: string
      enum:
      - only_nullable
      - nullable_and_non_nullable
    DataSchemaCapabilities:
      type: object
      properties:
        column_nullability:
          $ref: '#/components/schemas/ColumnNullability'
        supports_foreign_keys:
          type: boolean
          description: Whether tables can have foreign keys
          default: false
        supports_primary_keys:
          type: boolean
          description: Whether tables can have primary keys
          default: false
        supports_schemaless_tables:
          type: boolean
          description: Whether the database supports tables with no defined schema
          default: false
      example:
        supports_foreign_keys: false
        column_nullability: only_nullable
        supports_schemaless_tables: false
        supports_primary_keys: false
    ForeachCapabilities: {}
    QueryCapabilities:
      type: object
      properties:
        foreach:
          $ref: '#/components/schemas/ForeachCapabilities'
      example:
        foreach: ""
    InsertCapabilities:
      type: object
      properties:
        supports_nested_inserts:
          type: boolean
          description: Whether or not nested inserts to related tables are supported
          default: false
      example:
        supports_nested_inserts: false
    UpdateCapabilities: {}
    DeleteCapabilities: {}
    AtomicitySupportLevel:
      type: string
      description: |
        Describes the level of transactional atomicity the agent supports for mutation operations.
        'row': If multiple rows are affected in a single operation but one fails, only the failed row's changes will be reverted
        'single_operation': If multiple rows are affected in a single operation but one fails, all affected rows in the operation will be reverted
        'homogeneous_operations': If multiple operations of only the same type exist in the one mutation request, a failure in one will result in all changes being reverted
        'heterogeneous_operations': If multiple operations of any type exist in the one mutation request, a failure in one will result in all changes being reverted
      enum:
      - row
      - single_operation
      - homogeneous_operations
      - heterogeneous_operations
    ReturningCapabilities: {}
    MutationCapabilities:
      type: object
      properties:
        atomicity_support_level:
          $ref: '#/components/schemas/AtomicitySupportLevel'
        delete:
          $ref: '#/components/schemas/DeleteCapabilities'
        insert:
          $ref: '#/components/schemas/InsertCapabilities'
        returning:
          $ref: '#/components/schemas/ReturningCapabilities'
        update:
          $ref: '#/components/schemas/UpdateCapabilities'
      example:
        returning: ""
        atomicity_support_level: row
        insert:
          supports_nested_inserts: false
        update: ""
        delete: ""
    SubscriptionCapabilities: {}
    ScalarType:
      type: string
    ComparisonOperators:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ScalarType'
      description: |
        A map from comparison operator names to their argument types.
        Operator and argument type names must be valid GraphQL names.
        Argument type names must be defined scalar types declared in ScalarTypesCapabilities.
      x-schema-name: ComparisonOperators
    AggregateFunctions:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ScalarType'
      description: |
        A map from aggregate function names to their result types.
        Function and result type names must be valid GraphQL names.
        Result type names must be defined scalar types declared in ScalarTypesCapabilities.
      x-schema-name: AggregateFunctions
    UpdateColumnOperatorDefinition:
      required:
      - argument_type
      type: object
      properties:
        argument_type:
          $ref: '#/components/schemas/ScalarType'
      example:
        argument_type: null
    UpdateColumnOperators:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/UpdateColumnOperatorDefinition'
      description: |
        A map from update column operator names to their definitions.
        Operator names must be valid GraphQL names.
      x-schema-name: UpdateColumnOperators
    GraphQLType:
      type: string
      enum:
      - Int
      - Float
      - String
      - Boolean
      - ID
    ScalarTypeCapabilities:
      type: object
      properties:
        aggregate_functions:
          $ref: '#/components/schemas/AggregateFunctions'
        comparison_operators:
          $ref: '#/components/schemas/ComparisonOperators'
        graphql_type:
          $ref: '#/components/schemas/GraphQLType'
        update_column_operators:
          $ref: '#/components/schemas/UpdateColumnOperators'
      description: |
        Capabilities of a scalar type.
        comparison_operators: The comparison operators supported by the scalar type.
        aggregate_functions: The aggregate functions supported by the scalar type.
        update_column_operators: The update column operators supported by the scalar type.
        graphql_type: Associates the custom scalar type with one of the built-in GraphQL scalar types.  If a `graphql_type` is specified then HGE will use the parser for that built-in type when parsing values of the custom type. If not given then any JSON value will be accepted.
      example:
        aggregate_functions:
          key: aggregate_functions
        update_column_operators:
          key:
            argument_type: null
        comparison_operators:
          key: null
        graphql_type: Int
    ScalarTypesCapabilities:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ScalarTypeCapabilities'
      description: |
        A map from scalar type names to their capabilities.
        Keys must be valid GraphQL names and must be defined as scalar types in the `graphql_schema`
      x-schema-name: ScalarTypesCapabilities
    RelationshipCapabilities: {}
    SubqueryComparisonCapabilities:
      type: object
      properties:
        supports_relations:
          type: boolean
          description: Does the agent support comparisons that involve related tables
            (ie. joins)?
          default: false
      nullable: true
      example:
        supports_relations: false
    ComparisonCapabilities:
      type: object
      properties:
        subquery:
          $ref: '#/components/schemas/SubqueryComparisonCapabilities'
      example:
        subquery:
          supports_relations: false
    MetricsCapabilities: {}
    ExplainCapabilities: {}
    RawCapabilities: {}
    DatasetCapabilities: {}
    UserDefinedFunctionCapabilities: {}
    Licensing: {}
    ConfigSchemaResponse:
      required:
      - config_schema
      - other_schemas
      type: object
      properties:
        config_schema:
          $ref: '#/components/schemas/OpenApiSchema'
        other_schemas:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OpenApiSchema'
          nullable: false
      nullable: false
      example:
        config_schema:
          writeOnly: false
          nullable: false
          deprecated: false
          minLength: 0
          pattern: pattern
          description: description
          title: title
          type: array
          required:
          - required
          - required
          example: ""
          exclusiveMaximum: false
          allOf:
          - ""
          - ""
          default: ""
          not: ""
          oneOf:
          - ""
          - ""
          xml:
            prefix: prefix
            name: name
            namespace: http://example.com/aeiou
            attribute: false
            wrapped: false
          maxProperties: 0
          exclusiveMinimum: false
          multipleOf: 0.361607674925191080461672754609026014804840087890625
          maxItems: 0
          format: format
          anyOf:
          - ""
          - ""
          readOnly: false
          enum:
          - ""
          - ""
          discriminator:
            mapping:
              key: mapping
            propertyName: propertyName
          minProperties: 0
          minItems: 0
          uniqueItems: false
          maximum: 5.962133916683182377482808078639209270477294921875
          additionalProperties:
            key: ""
          externalDocs:
            description: description
            url: url
          items: ""
          minimum: 9.301444243932575517419536481611430644989013671875
          maxLength: 0
          properties:
            key: ""
        other_schemas:
          key: null
    OpenApiSchema:
      type: object
      properties:
        additionalProperties:
          type: object
          additionalProperties:
            oneOf:
            - $ref: '#/components/schemas/OpenApiSchema'
            - $ref: '#/components/schemas/OpenApiReference'
            - type: boolean
        allOf:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/OpenApiSchema'
            - $ref: '#/components/schemas/OpenApiReference'
        anyOf:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/OpenApiSchema'
            - $ref: '#/components/schemas/OpenApiReference'
        default: {}
        deprecated:
          type: boolean
          default: false
        description:
          type: string
        discriminator:
          $ref: '#/components/schemas/OpenApiDiscriminator'
        enum:
          minItems: 1
          uniqueItems: false
          type: array
          items: {}
        example: {}
        exclusiveMaximum:
          type: boolean
          default: false
        exclusiveMinimum:
          type: boolean
          default: false
        externalDocs:
          $ref: '#/components/schemas/OpenApiExternalDocumentation'
        format:
          type: string
        items:
          oneOf:
          - $ref: '#/components/schemas/OpenApiSchema'
          - $ref: '#/components/schemas/OpenApiReference'
        maxItems:
          minimum: 0
          type: integer
        maxLength:
          minimum: 0
          type: integer
        maxProperties:
          minimum: 0
          type: integer
        maximum:
          type: number
        minItems:
          minimum: 0
          type: integer
          default: 0
        minLength:
          minimum: 0
          type: integer
          default: 0
        minProperties:
          minimum: 0
          type: integer
          default: 0
        minimum:
          type: number
        multipleOf:
          minimum: 0
          exclusiveMinimum: true
          type: number
        not:
          oneOf:
          - $ref: '#/components/schemas/OpenApiSchema'
          - $ref: '#/components/schemas/OpenApiReference'
        nullable:
          type: boolean
          default: false
        oneOf:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/OpenApiSchema'
            - $ref: '#/components/schemas/OpenApiReference'
        pattern:
          type: string
          format: regex
        properties:
          type: object
          additionalProperties:
            oneOf:
            - $ref: '#/components/schemas/OpenApiSchema'
            - $ref: '#/components/schemas/OpenApiReference'
        readOnly:
          type: boolean
          default: false
        required:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            type: string
        title:
          type: string
        type:
          type: string
          enum:
          - array
          - boolean
          - integer
          - number
          - object
          - string
        uniqueItems:
          type: boolean
          default: false
        writeOnly:
          type: boolean
          default: false
        xml:
          $ref: '#/components/schemas/OpenApiXml'
      additionalProperties: false
      example:
        writeOnly: false
        nullable: false
        deprecated: false
        minLength: 0
        pattern: pattern
        description: description
        title: title
        type: array
        required:
        - required
        - required
        example: ""
        exclusiveMaximum: false
        allOf:
        - ""
        - ""
        default: ""
        not: ""
        oneOf:
        - ""
        - ""
        xml:
          prefix: prefix
          name: name
          namespace: http://example.com/aeiou
          attribute: false
          wrapped: false
        maxProperties: 0
        exclusiveMinimum: false
        multipleOf: 0.361607674925191080461672754609026014804840087890625
        maxItems: 0
        format: format
        anyOf:
        - ""
        - ""
        readOnly: false
        enum:
        - ""
        - ""
        discriminator:
          mapping:
            key: mapping
          propertyName: propertyName
        minProperties: 0
        minItems: 0
        uniqueItems: false
        maximum: 5.962133916683182377482808078639209270477294921875
        additionalProperties:
          key: ""
        externalDocs:
          description: description
          url: url
        items: ""
        minimum: 9.301444243932575517419536481611430644989013671875
        maxLength: 0
        properties:
          key: ""
    OpenApiReference:
      required:
      - $ref
      type: object
      properties:
        $ref:
          type: string
          format: uri-reference
    OpenApiDiscriminator:
      required:
      - propertyName
      type: object
      properties:
        mapping:
          type: object
          additionalProperties:
            type: string
        propertyName:
          type: string
      example:
        mapping:
          key: mapping
        propertyName: propertyName
    OpenApiExternalDocumentation:
      required:
      - url
      type: object
      properties:
        description:
          type: string
        url:
          type: string
          format: uri-reference
      additionalProperties: false
      example:
        description: description
        url: url
    OpenApiXml:
      type: object
      properties:
        attribute:
          type: boolean
          default: false
        name:
          type: string
        namespace:
          type: string
          format: uri
        prefix:
          type: string
        wrapped:
          type: boolean
          default: false
      additionalProperties: false
      example:
        prefix: prefix
        name: name
        namespace: http://example.com/aeiou
        attribute: false
        wrapped: false
    ErrorResponse:
      required:
      - message
      type: object
      properties:
        details:
          type: object
          additionalProperties: true
          description: Error details
        message:
          type: string
          description: Error message
        type:
          $ref: '#/components/schemas/ErrorResponseType'
    ErrorResponseType:
      type: string
      enum:
      - uncaught-error
      - mutation-constraint-violation
      - mutation-permission-check-failure
    SchemaResponse:
      required:
      - tables
      type: object
      properties:
        functions:
          type: array
          description: Available functions
          items:
            $ref: '#/components/schemas/FunctionInfo'
          default: []
        objectTypes:
          type: array
          description: Object type definitions referenced in this schema
          items:
            $ref: '#/components/schemas/ObjectTypeDefinition'
        tables:
          type: array
          description: Available tables
          items:
            $ref: '#/components/schemas/TableInfo'
      example:
        tables:
        - columns:
          - null
          - null
          deletable: false
          name: null
          description: description
          updatable: false
          foreign_keys:
            key:
              column_mapping:
                key: column_mapping
              foreign_table:
              - foreign_table
              - foreign_table
          type: table
          primary_key:
          - primary_key
          - primary_key
          insertable: false
        - columns:
          - null
          - null
          deletable: false
          name: null
          description: description
          updatable: false
          foreign_keys:
            key:
              column_mapping:
                key: column_mapping
              foreign_table:
              - foreign_table
              - foreign_table
          type: table
          primary_key:
          - primary_key
          - primary_key
          insertable: false
        functions:
        - args:
          - name: name
            optional: false
            type: type
          - name: name
            optional: false
            type: type
          name:
          - name
          - name
          description: description
          returns: ""
          response_cardinality: one
          type: read
        - args:
          - name: name
            optional: false
            type: type
          - name: name
            optional: false
            type: type
          name:
          - name
          - name
          description: description
          returns: ""
          response_cardinality: one
          type: read
        objectTypes:
        - columns:
          - nullable: true
            name: name
            value_generated: ""
            description: description
            updatable: false
            type: ""
            insertable: false
          - nullable: true
            name: name
            value_generated: ""
            description: description
            updatable: false
            type: ""
            insertable: false
          name: name
          description: description
        - columns:
          - nullable: true
            name: name
            value_generated: ""
            description: description
            updatable: false
            type: ""
            insertable: false
          - nullable: true
            name: name
            value_generated: ""
            description: description
            updatable: false
            type: ""
            insertable: false
          name: name
          description: description
    TableName:
      type: array
      description: "The fully qualified name of a table, where the last item in the\
        \ array is the table name and any earlier items represent the namespacing\
        \ of the table name"
      items:
        type: string
      x-schema-name: TableName
    TableType:
      type: string
      enum:
      - table
      - view
    ColumnType:
      additionalProperties: true
      anyOf:
      - $ref: '#/components/schemas/ScalarType'
      - $ref: '#/components/schemas/ColumnTypeNonScalar'
    ColumnTypeArray:
      required:
      - element_type
      - nullable
      - type
      type: object
      properties:
        element_type:
          $ref: '#/components/schemas/ColumnType'
        nullable:
          type: boolean
        type:
          type: string
          enum:
          - array
    ColumnTypeObject:
      required:
      - name
      - type
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum:
          - object
    ColumnTypeNonScalar:
      discriminator:
        propertyName: Type_
        mapping:
          array: ColumnTypeArray
          object: ColumnTypeObject
      oneOf:
      - $ref: '#/components/schemas/ColumnTypeArray'
      - $ref: '#/components/schemas/ColumnTypeObject'
    DefaultValueGenerationStrategy:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - default_value
    AutoIncrementGenerationStrategy:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - auto_increment
    UniqueIdentifierGenerationStrategy:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - unique_identifier
    ColumnValueGenerationStrategy:
      discriminator:
        propertyName: Type_
        mapping:
          auto_increment: AutoIncrementGenerationStrategy
          default_value: DefaultValueGenerationStrategy
          unique_identifier: UniqueIdentifierGenerationStrategy
      oneOf:
      - $ref: '#/components/schemas/DefaultValueGenerationStrategy'
      - $ref: '#/components/schemas/AutoIncrementGenerationStrategy'
      - $ref: '#/components/schemas/UniqueIdentifierGenerationStrategy'
    ColumnInfo:
      required:
      - name
      - nullable
      - type
      type: object
      properties:
        description:
          type: string
          description: Column description
          nullable: true
        insertable:
          type: boolean
          description: Whether or not the column can be inserted into
          default: false
        name:
          type: string
          description: Column name
        nullable:
          type: boolean
          description: Is column nullable
        type:
          $ref: '#/components/schemas/ColumnType'
        updatable:
          type: boolean
          description: Whether or not the column can be updated
          default: false
        value_generated:
          $ref: '#/components/schemas/ColumnValueGenerationStrategy'
      example:
        nullable: true
        name: name
        value_generated: ""
        description: description
        updatable: false
        type: ""
        insertable: false
    Constraint:
      required:
      - column_mapping
      - foreign_table
      type: object
      properties:
        column_mapping:
          type: object
          additionalProperties:
            type: string
          description: The columns on which you want want to define the foreign key.
        foreign_table:
          $ref: '#/components/schemas/TableName'
      example:
        column_mapping:
          key: column_mapping
        foreign_table:
        - foreign_table
        - foreign_table
    TableInfo:
      required:
      - columns
      - name
      type: object
      properties:
        columns:
          type: array
          description: The columns of the table
          items:
            $ref: '#/components/schemas/ColumnInfo'
        deletable:
          type: boolean
          description: Whether or not existing rows can be deleted in the table
          default: false
        description:
          type: string
          description: Description of the table
          nullable: true
        foreign_keys:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Constraint'
          description: Foreign key constraints
          default: {}
        insertable:
          type: boolean
          description: Whether or not new rows can be inserted into the table
          default: false
        name:
          $ref: '#/components/schemas/TableName'
        primary_key:
          type: array
          description: The primary key of the table
          items:
            type: string
          default: []
        type:
          $ref: '#/components/schemas/TableType'
        updatable:
          type: boolean
          description: Whether or not existing rows can be updated in the table
          default: false
      example:
        columns:
        - null
        - null
        deletable: false
        name: null
        description: description
        updatable: false
        foreign_keys:
          key:
            column_mapping:
              key: column_mapping
            foreign_table:
            - foreign_table
            - foreign_table
        type: table
        primary_key:
        - primary_key
        - primary_key
        insertable: false
    FunctionName:
      type: array
      description: "The fully qualified name of a function, where the last item in\
        \ the array is the function name and any earlier items represent the namespacing\
        \ of the function name"
      items:
        type: string
      x-schema-name: FunctionName
    FunctionType:
      type: string
      enum:
      - read
      - write
    FunctionReturnsTable:
      required:
      - table
      - type
      type: object
      properties:
        table:
          $ref: '#/components/schemas/TableName'
        type:
          type: string
          enum:
          - table
    FunctionReturnsUnknown:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - unknown
    FunctionReturnType:
      discriminator:
        propertyName: Type_
        mapping:
          table: FunctionReturnsTable
          unknown: FunctionReturnsUnknown
      oneOf:
      - $ref: '#/components/schemas/FunctionReturnsTable'
      - $ref: '#/components/schemas/FunctionReturnsUnknown'
    FunctionInformationArgument:
      required:
      - name
      - type
      type: object
      properties:
        name:
          type: string
          description: The name of the argument
        optional:
          type: boolean
          description: If the argument can be omitted
          default: false
        type:
          $ref: '#/components/schemas/ScalarType'
      example:
        name: name
        optional: false
        type: type
    FunctionInfo:
      required:
      - args
      - name
      - response_cardinality
      - returns
      - type
      type: object
      properties:
        args:
          type: array
          description: argument info - name/types
          items:
            $ref: '#/components/schemas/FunctionInformationArgument'
        description:
          type: string
          description: Description of the table
          nullable: true
        name:
          $ref: '#/components/schemas/FunctionName'
        response_cardinality:
          type: string
          description: "object response if false, rows if true"
          enum:
          - one
          - many
        returns:
          $ref: '#/components/schemas/FunctionReturnType'
        type:
          $ref: '#/components/schemas/FunctionType'
      example:
        args:
        - name: name
          optional: false
          type: type
        - name: name
          optional: false
          type: type
        name:
        - name
        - name
        description: description
        returns: ""
        response_cardinality: one
        type: read
    ObjectTypeDefinition:
      required:
      - columns
      - name
      type: object
      properties:
        columns:
          type: array
          description: The columns of the type
          items:
            $ref: '#/components/schemas/ColumnInfo'
        description:
          type: string
          description: The description of the type
        name:
          type: string
          description: The name of the type
      example:
        columns:
        - nullable: true
          name: name
          value_generated: ""
          description: description
          updatable: false
          type: ""
          insertable: false
        - nullable: true
          name: name
          value_generated: ""
          description: description
          updatable: false
          type: ""
          insertable: false
        name: name
        description: description
    QueryResponse:
      type: object
      properties:
        aggregates:
          type: object
          additionalProperties:
            type: object
            additionalProperties: true
          description: The results of the aggregates returned by the query
          nullable: true
        rows:
          type: array
          description: "The rows returned by the query, corresponding to the query's\
            \ fields"
          nullable: true
          items:
            type: object
            additionalProperties:
              additionalProperties: true
              anyOf:
              - $ref: '#/components/schemas/ColumnFieldValue'
              - $ref: '#/components/schemas/QueryResponse'
              - $ref: '#/components/schemas/NullColumnFieldValue'
      example:
        aggregates:
          key: ""
        rows:
        - key: ""
        - key: ""
    ColumnFieldValue:
      type: object
      additionalProperties: true
    NullColumnFieldValue:
      type: "null"
    QueryRequest:
      discriminator:
        propertyName: Type_
        mapping:
          function: FunctionRequest
          table: TableRequest
      oneOf:
      - $ref: '#/components/schemas/FunctionRequest'
      - $ref: '#/components/schemas/TableRequest'
    ScalarArgumentValue:
      required:
      - type
      - value
      - value_type
      type: object
      properties:
        type:
          type: string
          enum:
          - scalar
        value:
          type: object
          additionalProperties: true
        value_type:
          $ref: '#/components/schemas/ScalarType'
    ArgumentValue:
      discriminator:
        propertyName: Type_
        mapping:
          scalar: ScalarArgumentValue
      oneOf:
      - $ref: '#/components/schemas/ScalarArgumentValue'
    NamedArgument:
      required:
      - name
      - type
      - value
      type: object
      properties:
        name:
          type: string
          description: The name of the named argument
        type:
          type: string
          enum:
          - named
        value:
          $ref: '#/components/schemas/ArgumentValue'
    FunctionRequestArgument:
      discriminator:
        propertyName: Type_
        mapping:
          named: NamedArgument
      oneOf:
      - $ref: '#/components/schemas/NamedArgument'
    RelationshipType:
      type: string
      enum:
      - object
      - array
    Relationship:
      required:
      - column_mapping
      - relationship_type
      - target_table
      type: object
      properties:
        column_mapping:
          type: object
          additionalProperties:
            type: string
          description: A mapping between columns on the source table to columns on
            the target table
        relationship_type:
          $ref: '#/components/schemas/RelationshipType'
        target_table:
          $ref: '#/components/schemas/TableName'
    FunctionRelationships:
      required:
      - relationships
      - source_function
      - type
      type: object
      properties:
        relationships:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Relationship'
          description: A map of relationships from the source table to target tables.
            The key of the map is the relationship name
        source_function:
          $ref: '#/components/schemas/FunctionName'
        type:
          type: string
          enum:
          - function
    TableRelationships:
      required:
      - relationships
      - source_table
      - type
      type: object
      properties:
        relationships:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Relationship'
          description: A map of relationships from the source table to target tables.
            The key of the map is the relationship name
        source_table:
          $ref: '#/components/schemas/TableName'
        type:
          type: string
          enum:
          - table
    Relationships:
      discriminator:
        propertyName: Type_
        mapping:
          function: FunctionRelationships
          table: TableRelationships
      oneOf:
      - $ref: '#/components/schemas/FunctionRelationships'
      - $ref: '#/components/schemas/TableRelationships'
    Field:
      discriminator:
        propertyName: Type_
        mapping:
          array: NestedArrayField
          column: ColumnField
          object: NestedObjField
          relationship: RelationshipField
      oneOf:
      - $ref: '#/components/schemas/NestedArrayField'
      - $ref: '#/components/schemas/NestedObjField'
      - $ref: '#/components/schemas/ColumnField'
      - $ref: '#/components/schemas/RelationshipField'
    BinaryComparisonOperator:
      additionalProperties: true
      anyOf:
      - type: string
        enum:
        - less_than
        - less_than_or_equal
        - greater_than
        - greater_than_or_equal
        - equal
      - type: string
    ComparisonColumn:
      required:
      - column_type
      - name
      type: object
      properties:
        column_type:
          $ref: '#/components/schemas/ScalarType'
        name:
          type: string
          description: The name of the column
        path:
          type: array
          description: "The path to the table that contains the specified column.\
            \ Missing or empty array means the current table. [\"$\"] means the query\
            \ table. No other values are supported at this time."
          items:
            type: string
          default: []
    ScalarValueComparison:
      required:
      - type
      - value
      - value_type
      type: object
      properties:
        type:
          type: string
          enum:
          - scalar
        value:
          type: object
          additionalProperties: true
        value_type:
          $ref: '#/components/schemas/ScalarType'
    AnotherColumnComparison:
      required:
      - column
      - type
      type: object
      properties:
        column:
          $ref: '#/components/schemas/ComparisonColumn'
        type:
          type: string
          enum:
          - column
    ComparisonValue:
      discriminator:
        propertyName: Type_
        mapping:
          column: AnotherColumnComparison
          scalar: ScalarValueComparison
      oneOf:
      - $ref: '#/components/schemas/ScalarValueComparison'
      - $ref: '#/components/schemas/AnotherColumnComparison'
    ApplyBinaryComparisonOperator:
      required:
      - column
      - operator
      - type
      - value
      type: object
      properties:
        column:
          $ref: '#/components/schemas/ComparisonColumn'
        operator:
          $ref: '#/components/schemas/BinaryComparisonOperator'
        type:
          type: string
          enum:
          - binary_op
        value:
          $ref: '#/components/schemas/ComparisonValue'
    Expression:
      discriminator:
        propertyName: Type_
        mapping:
          and: AndExpression
          binary_arr_op: ApplyBinaryArrayComparisonOperator
          binary_op: ApplyBinaryComparisonOperator
          exists: ExistsExpression
          not: NotExpression
          or: OrExpression
          unary_op: ApplyUnaryComparisonOperator
      oneOf:
      - $ref: '#/components/schemas/ApplyBinaryComparisonOperator'
      - $ref: '#/components/schemas/NotExpression'
      - $ref: '#/components/schemas/ExistsExpression'
      - $ref: '#/components/schemas/OrExpression'
      - $ref: '#/components/schemas/ApplyBinaryArrayComparisonOperator'
      - $ref: '#/components/schemas/ApplyUnaryComparisonOperator'
      - $ref: '#/components/schemas/AndExpression'
    NotExpression:
      required:
      - expression
      - type
      type: object
      properties:
        expression:
          $ref: '#/components/schemas/Expression'
        type:
          type: string
          enum:
          - not
    UnrelatedTable:
      required:
      - table
      - type
      type: object
      properties:
        table:
          $ref: '#/components/schemas/TableName'
        type:
          type: string
          enum:
          - unrelated
    RelatedTable:
      required:
      - relationship
      - type
      type: object
      properties:
        relationship:
          type: string
        type:
          type: string
          enum:
          - related
    ExistsInTable:
      discriminator:
        propertyName: Type_
        mapping:
          related: RelatedTable
          unrelated: UnrelatedTable
      oneOf:
      - $ref: '#/components/schemas/UnrelatedTable'
      - $ref: '#/components/schemas/RelatedTable'
    ExistsExpression:
      required:
      - in_table
      - type
      - where
      type: object
      properties:
        in_table:
          $ref: '#/components/schemas/ExistsInTable'
        type:
          type: string
          enum:
          - exists
        where:
          $ref: '#/components/schemas/Expression'
    OrExpression:
      required:
      - expressions
      - type
      type: object
      properties:
        expressions:
          type: array
          items:
            $ref: '#/components/schemas/Expression'
        type:
          type: string
          enum:
          - or
    BinaryArrayComparisonOperator:
      additionalProperties: true
      anyOf:
      - type: string
        enum:
        - in
      - type: string
    ApplyBinaryArrayComparisonOperator:
      required:
      - column
      - operator
      - type
      - value_type
      - values
      type: object
      properties:
        column:
          $ref: '#/components/schemas/ComparisonColumn'
        operator:
          $ref: '#/components/schemas/BinaryArrayComparisonOperator'
        type:
          type: string
          enum:
          - binary_arr_op
        value_type:
          $ref: '#/components/schemas/ScalarType'
        values:
          type: array
          items:
            type: object
            additionalProperties: true
    UnaryComparisonOperator:
      additionalProperties: true
      anyOf:
      - type: string
        enum:
        - is_null
      - type: string
    ApplyUnaryComparisonOperator:
      required:
      - column
      - operator
      - type
      type: object
      properties:
        column:
          $ref: '#/components/schemas/ComparisonColumn'
        operator:
          $ref: '#/components/schemas/UnaryComparisonOperator'
        type:
          type: string
          enum:
          - unary_op
    AndExpression:
      required:
      - expressions
      - type
      type: object
      properties:
        expressions:
          type: array
          items:
            $ref: '#/components/schemas/Expression'
        type:
          type: string
          enum:
          - and
    OrderByRelation:
      required:
      - subrelations
      type: object
      properties:
        subrelations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OrderByRelation'
          description: Further relationships to follow from the relationship's target
            table. The key of the map is the relationship name.
        where:
          $ref: '#/components/schemas/Expression'
    SingleColumnAggregateFunction:
      type: string
      description: |-
        Single column aggregate function name.
        A valid GraphQL name
    OrderBySingleColumnAggregate:
      required:
      - column
      - function
      - result_type
      - type
      type: object
      properties:
        column:
          type: string
          description: The column to apply the aggregation function to
        function:
          $ref: '#/components/schemas/SingleColumnAggregateFunction'
        result_type:
          $ref: '#/components/schemas/ScalarType'
        type:
          type: string
          enum:
          - single_column_aggregate
    OrderByColumn:
      required:
      - column
      - type
      type: object
      properties:
        column:
          type: string
        type:
          type: string
          enum:
          - column
    OrderByStarCountAggregate:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - star_count_aggregate
    OrderByTarget:
      discriminator:
        propertyName: Type_
        mapping:
          column: OrderByColumn
          single_column_aggregate: OrderBySingleColumnAggregate
          star_count_aggregate: OrderByStarCountAggregate
      oneOf:
      - $ref: '#/components/schemas/OrderBySingleColumnAggregate'
      - $ref: '#/components/schemas/OrderByColumn'
      - $ref: '#/components/schemas/OrderByStarCountAggregate'
    OrderDirection:
      type: string
      enum:
      - asc
      - desc
    OrderByElement:
      required:
      - order_direction
      - target
      - target_path
      type: object
      properties:
        order_direction:
          $ref: '#/components/schemas/OrderDirection'
        target:
          $ref: '#/components/schemas/OrderByTarget'
        target_path:
          type: array
          description: The relationship path from the current query table to the table
            that contains the target to order by. This is always non-empty for aggregate
            order by targets
          items:
            type: string
    OrderBy:
      required:
      - elements
      - relations
      type: object
      properties:
        elements:
          type: array
          description: "The elements to order by, in priority order"
          items:
            $ref: '#/components/schemas/OrderByElement'
        relations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OrderByRelation'
          description: A map of relationships from the current query table to target
            tables. The key of the map is the relationship name. The relationships
            are used within the order by elements.
      nullable: true
    NestedArrayField:
      required:
      - field
      - type
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
        limit:
          maximum: 9223372036854776000
          minimum: -9223372036854776000
          type: number
          description: Optionally limit the maximum number of returned elements of
            the array
          nullable: true
        offset:
          maximum: 9223372036854776000
          minimum: -9223372036854776000
          type: number
          description: Optionally skip the first n elements of the array
          nullable: true
        order_by:
          $ref: '#/components/schemas/OrderBy'
        type:
          type: string
          enum:
          - array
        where:
          $ref: '#/components/schemas/Expression'
    Query:
      type: object
      properties:
        aggregates:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Aggregate'
          description: Aggregate fields of the query
          nullable: true
        aggregates_limit:
          maximum: 9223372036854776000
          minimum: -9223372036854776000
          type: number
          description: Optionally limit the maximum number of rows considered while
            applying aggregations. This limit does not apply to returned rows.
          nullable: true
        fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Field'
          description: Fields of the query
          nullable: true
        limit:
          maximum: 9223372036854776000
          minimum: -9223372036854776000
          type: number
          description: Optionally limit the maximum number of returned rows. This
            limit does not apply to records considered while apply aggregations.
          nullable: true
        offset:
          maximum: 9223372036854776000
          minimum: -9223372036854776000
          type: number
          description: Optionally offset from the Nth result. This applies to both
            row and aggregation results.
          nullable: true
        order_by:
          $ref: '#/components/schemas/OrderBy'
        where:
          $ref: '#/components/schemas/Expression'
    NestedObjField:
      required:
      - column
      - query
      - type
      type: object
      properties:
        column:
          type: string
        query:
          $ref: '#/components/schemas/Query'
        type:
          type: string
          enum:
          - object
    ColumnField:
      required:
      - column
      - column_type
      - type
      type: object
      properties:
        column:
          type: string
        column_type:
          $ref: '#/components/schemas/ScalarType'
        type:
          type: string
          enum:
          - column
    RelationshipField:
      required:
      - query
      - relationship
      - type
      type: object
      properties:
        query:
          $ref: '#/components/schemas/Query'
        relationship:
          type: string
          description: The name of the relationship to follow for the subquery
        type:
          type: string
          enum:
          - relationship
    SingleColumnAggregate:
      required:
      - column
      - function
      - result_type
      - type
      type: object
      properties:
        column:
          type: string
          description: The column to apply the aggregation function to
        function:
          $ref: '#/components/schemas/SingleColumnAggregateFunction'
        result_type:
          $ref: '#/components/schemas/ScalarType'
        type:
          type: string
          enum:
          - single_column
    ColumnCountAggregate:
      required:
      - column
      - distinct
      - type
      type: object
      properties:
        column:
          type: string
          description: The column to apply the count aggregate function to
        distinct:
          type: boolean
          description: Whether or not only distinct items should be counted
        type:
          type: string
          enum:
          - column_count
    StarCountAggregate:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - star_count
    Aggregate:
      discriminator:
        propertyName: Type_
        mapping:
          column_count: ColumnCountAggregate
          single_column: SingleColumnAggregate
          star_count: StarCountAggregate
      oneOf:
      - $ref: '#/components/schemas/SingleColumnAggregate'
      - $ref: '#/components/schemas/ColumnCountAggregate'
      - $ref: '#/components/schemas/StarCountAggregate'
    FunctionRequest:
      required:
      - function
      - query
      - relationships
      - type
      type: object
      properties:
        function:
          $ref: '#/components/schemas/FunctionName'
        function_arguments:
          type: array
          description: Function Arguments. TODO. Improve this.
          items:
            $ref: '#/components/schemas/FunctionRequestArgument'
          default: []
        query:
          $ref: '#/components/schemas/Query'
        relationships:
          type: array
          description: The relationships between entities involved in the entire query
            request
          items:
            $ref: '#/components/schemas/Relationships'
        type:
          type: string
          enum:
          - function
    ScalarValue:
      required:
      - value
      - value_type
      type: object
      properties:
        value:
          type: object
          additionalProperties: true
        value_type:
          $ref: '#/components/schemas/ScalarType'
    TableRequest:
      required:
      - query
      - table
      - table_relationships
      - type
      type: object
      properties:
        foreach:
          type: array
          description: "If present, a list of columns and values for the columns that\
            \ the query must be repeated for, applying the column values as a filter\
            \ for each query."
          nullable: true
          items:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/ScalarValue'
        query:
          $ref: '#/components/schemas/Query'
        table:
          $ref: '#/components/schemas/TableName'
        table_relationships:
          type: array
          description: The relationships between tables involved in the entire query
            request
          items:
            $ref: '#/components/schemas/Relationships'
        type:
          type: string
          enum:
          - table
    ExplainResponse:
      required:
      - lines
      - query
      type: object
      properties:
        lines:
          type: array
          description: Lines of the formatted explain plan response
          items:
            type: string
        query:
          type: string
          description: The generated query - i.e. SQL for a relational DB
      example:
        query: query
        lines:
        - lines
        - lines
    MutationResponse:
      required:
      - operation_results
      type: object
      properties:
        operation_results:
          type: array
          description: "The results of each mutation operation, in the same order\
            \ as they were received"
          items:
            $ref: '#/components/schemas/MutationOperationResults'
      example:
        operation_results:
        - returning:
          - key: ""
          - key: ""
          affected_rows: -7746104769210155008
        - returning:
          - key: ""
          - key: ""
          affected_rows: -7746104769210155008
    MutationOperationResults:
      required:
      - affected_rows
      type: object
      properties:
        affected_rows:
          maximum: 9223372036854776000
          minimum: -9223372036854776000
          type: number
          description: The number of rows affected by the mutation operation
        returning:
          type: array
          description: The rows affected by the mutation operation
          nullable: true
          items:
            type: object
            additionalProperties:
              additionalProperties: true
              anyOf:
              - $ref: '#/components/schemas/ColumnFieldValue'
              - $ref: '#/components/schemas/QueryResponse'
              - $ref: '#/components/schemas/NullColumnFieldValue'
      example:
        returning:
        - key: ""
        - key: ""
        affected_rows: -7746104769210155008
    MutationRequest:
      required:
      - insert_schema
      - operations
      - table_relationships
      type: object
      properties:
        insert_schema:
          type: array
          description: The schema by which to interpret row data specified in any
            insert operations in this request
          items:
            $ref: '#/components/schemas/TableInsertSchema'
        operations:
          type: array
          description: The mutation operations to perform
          items:
            $ref: '#/components/schemas/MutationOperation'
        table_relationships:
          type: array
          description: The relationships between tables involved in the entire mutation
            request
          items:
            $ref: '#/components/schemas/TableRelationships'
    ObjectRelationInsertionOrder:
      type: string
      enum:
      - before_parent
      - after_parent
    ObjectRelationInsertSchema:
      required:
      - insertion_order
      - relationship
      - type
      type: object
      properties:
        insertion_order:
          $ref: '#/components/schemas/ObjectRelationInsertionOrder'
        relationship:
          type: string
          description: The name of the object relationship over which the related
            row must be inserted
        type:
          type: string
          enum:
          - object_relation
    ArrayRelationInsertSchema:
      required:
      - relationship
      - type
      type: object
      properties:
        relationship:
          type: string
          description: The name of the array relationship over which the related rows
            must be inserted
        type:
          type: string
          enum:
          - array_relation
    ColumnInsertSchema:
      required:
      - column
      - column_type
      - nullable
      - type
      type: object
      properties:
        column:
          type: string
          description: The name of the column that this field should be inserted into
        column_type:
          $ref: '#/components/schemas/ColumnType'
        nullable:
          type: boolean
          description: Is the column nullable
        type:
          type: string
          enum:
          - column
        value_generated:
          $ref: '#/components/schemas/ColumnValueGenerationStrategy'
    InsertFieldSchema:
      discriminator:
        propertyName: Type_
        mapping:
          array_relation: ArrayRelationInsertSchema
          column: ColumnInsertSchema
          object_relation: ObjectRelationInsertSchema
      oneOf:
      - $ref: '#/components/schemas/ObjectRelationInsertSchema'
      - $ref: '#/components/schemas/ArrayRelationInsertSchema'
      - $ref: '#/components/schemas/ColumnInsertSchema'
    TableInsertSchema:
      required:
      - fields
      - table
      type: object
      properties:
        fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InsertFieldSchema'
          description: The fields that will be found in the insert row data for the
            table and the schema for each field
        primary_key:
          type: array
          description: The names of the columns that make up the table's primary key
          nullable: true
          items:
            type: string
        table:
          $ref: '#/components/schemas/TableName'
    ColumnInsertFieldValue:
      type: object
      additionalProperties: true
    ObjectRelationInsertFieldValue: {}
    RowObject:
      type: object
      additionalProperties:
        additionalProperties: true
        anyOf:
        - $ref: '#/components/schemas/ColumnInsertFieldValue'
        - $ref: '#/components/schemas/ObjectRelationInsertFieldValue'
        - $ref: '#/components/schemas/ArrayRelationInsertFieldValue'
        - $ref: '#/components/schemas/NullColumnInsertFieldValue'
      x-schema-name: RowObject
    ArrayRelationInsertFieldValue:
      type: array
      items:
        $ref: '#/components/schemas/RowObject'
    NullColumnInsertFieldValue:
      type: "null"
    InsertMutationOperation:
      required:
      - rows
      - table
      - type
      type: object
      properties:
        post_insert_check:
          $ref: '#/components/schemas/Expression'
        returning_fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Field'
          description: The fields to return for the rows affected by this insert operation
          nullable: true
          default: {}
        rows:
          type: array
          description: The rows to insert into the table
          items:
            $ref: '#/components/schemas/RowObject'
        table:
          $ref: '#/components/schemas/TableName'
        type:
          type: string
          enum:
          - insert
    DeleteMutationOperation:
      required:
      - table
      - type
      type: object
      properties:
        returning_fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Field'
          description: The fields to return for the rows affected by this delete operation
          nullable: true
          default: {}
        table:
          $ref: '#/components/schemas/TableName'
        type:
          type: string
          enum:
          - delete
        where:
          $ref: '#/components/schemas/Expression'
    UpdateColumnOperatorName:
      type: string
    CustomUpdateColumnOperatorRowUpdate:
      required:
      - column
      - operator_name
      - type
      - value
      - value_type
      type: object
      properties:
        column:
          type: string
          description: The name of the column in the row
        operator_name:
          $ref: '#/components/schemas/UpdateColumnOperatorName'
        type:
          type: string
          enum:
          - custom_operator
        value:
          type: object
          additionalProperties: true
          description: The value to use with the column operator
        value_type:
          $ref: '#/components/schemas/ScalarType'
    SetColumnRowUpdate:
      required:
      - column
      - type
      - value
      - value_type
      type: object
      properties:
        column:
          type: string
          description: The name of the column in the row
        type:
          type: string
          enum:
          - set
        value:
          type: object
          additionalProperties: true
          description: The value to use with the column operator
        value_type:
          $ref: '#/components/schemas/ScalarType'
    RowUpdate:
      discriminator:
        propertyName: Type_
        mapping:
          custom_operator: CustomUpdateColumnOperatorRowUpdate
          set: SetColumnRowUpdate
      oneOf:
      - $ref: '#/components/schemas/CustomUpdateColumnOperatorRowUpdate'
      - $ref: '#/components/schemas/SetColumnRowUpdate'
    UpdateMutationOperation:
      required:
      - table
      - type
      - updates
      type: object
      properties:
        post_update_check:
          $ref: '#/components/schemas/Expression'
        returning_fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Field'
          description: The fields to return for the rows affected by this update operation
          nullable: true
          default: {}
        table:
          $ref: '#/components/schemas/TableName'
        type:
          type: string
          enum:
          - update
        updates:
          type: array
          description: The updates to make to the matched rows in the table
          items:
            $ref: '#/components/schemas/RowUpdate'
        where:
          $ref: '#/components/schemas/Expression'
    MutationOperation:
      discriminator:
        propertyName: Type_
        mapping:
          delete: DeleteMutationOperation
          insert: InsertMutationOperation
          update: UpdateMutationOperation
      oneOf:
      - $ref: '#/components/schemas/InsertMutationOperation'
      - $ref: '#/components/schemas/DeleteMutationOperation'
      - $ref: '#/components/schemas/UpdateMutationOperation'
    RawResponse:
      required:
      - rows
      type: object
      properties:
        rows:
          type: array
          description: The rows returned by the raw query.
          items:
            type: object
            additionalProperties:
              type: object
              additionalProperties: true
      example:
        rows:
        - key: ""
        - key: ""
    RawRequest:
      required:
      - query
      type: object
      properties:
        query:
          type: string
          description: A string representing a raw query
    DatasetGetTemplateResponse:
      required:
      - exists
      type: object
      properties:
        exists:
          type: boolean
          description: Message detailing if the dataset exists
      example:
        exists: true
    DatasetCreateCloneResponse:
      required:
      - config
      type: object
      properties:
        config:
          $ref: '#/components/schemas/Config'
      example:
        config:
          key: ""
    Config:
      type: object
      additionalProperties:
        type: object
        additionalProperties: true
      x-schema-name: Config
    DatasetCreateCloneRequest:
      required:
      - from
      type: object
      properties:
        from:
          $ref: '#/components/schemas/DatasetTemplateName'
    DatasetTemplateName:
      type: string
    DatasetDeleteCloneResponse:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: The named dataset to clone from
      example:
        message: message
