/*
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"io"
	"net/http"
)

func CapabilitiesGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	response := `{
		"capabilities": {
		  "queries": {
			"foreach": {}
		  },
		  "data_schema": {
			"supports_primary_keys": true,
			"supports_foreign_keys": true,
			"column_nullability": "nullable_and_non_nullable"
		  },
		  "relationships": {},
		  "scalar_types": {
			"DateTime": {"comparison_operators": {"in_year": "Number"}}
		  },
		  "user_defined_functions": {}
		},
		"config_schemas": {
		  "config_schema": {
			"type": "object",
			"nullable": false,
			"properties": {
			  "tables": { "$ref": "#/other_schemas/Tables" }
			}
		  },
		  "other_schemas": {
			"Tables": {
			  "description": "List of tables to make available in the schema and for querying",
			  "type": "array",
			  "items": { "$ref": "#/other_schemas/TableName" },
			  "nullable": true
			},
			"TableName": {
			  "nullable": false,
			  "type": "string"
			},
			"PostgreSQL_URL": {
				"nullable": false,
				"type": "string"
			},
			"MongoDB_URL": {
				"nullable": false,
				"type": "string"
			}
		  }
		}
	}`

	io.WriteString(w, response)

	w.WriteHeader(http.StatusOK)
}

func DatasetsClonesCloneNameDelete(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func DatasetsClonesCloneNamePost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func DatasetsTemplatesTemplateNameGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func ExplainPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func HealthGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func MetricsGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func MutationPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func QueryPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func RawPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func SchemaGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	response := `{
		"tables": [
		  {
			"name": ["Artist"],
			"type": "table",
			"primary_key": ["ArtistId"],
			"description": "Collection of artists of music",
			"columns": [
			  {
				"name": "ArtistId",
				"type": "number",
				"nullable": false,
				"description": "Artist primary key identifier",
				"insertable": true,
				"updatable": false,
				"value_generated": { "type": "auto_increment" }
			  },
			  {
				"name": "Name",
				"type": "string",
				"nullable": true,
				"description": "The name of the artist",
				"insertable": true,
				"updatable": true
			  }
			],
			"insertable": true,
			"updatable": true,
			"deletable": true
		  },
		  {
			"name": ["Album"],
			"type": "table",
			"primary_key": ["AlbumId"],
			"description": "Collection of music albums created by artists",
			"columns": [
			  {
				"name": "AlbumId",
				"type": "number",
				"nullable": false,
				"description": "Album primary key identifier",
				"insertable": true,
				"updatable": false,
				"value_generated": { "type": "auto_increment" }
			  },
			  {
				"name": "Title",
				"type": "string",
				"nullable": false,
				"description": "The title of the album",
				"insertable": true,
				"updatable": true
			  },
			  {
				"name": "ArtistId",
				"type": "number",
				"nullable": false,
				"description": "The ID of the artist that created this album",
				"insertable": true,
				"updatable": true
			  }
			],
			"insertable": true,
			"updatable": true,
			"deletable": true
		  }
		]
	}`

	io.WriteString(w, response)

	w.WriteHeader(http.StatusOK)
}
